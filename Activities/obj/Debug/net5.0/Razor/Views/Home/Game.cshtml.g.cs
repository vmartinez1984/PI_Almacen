#pragma checksum "C:\Users\vmartinez\source\repos\vmartinez1984\PI_Almacen\Activities\Views\Home\Game.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "32b3c3bd2eaf616176c4deaea7f1f0b78c9fca96"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Game), @"mvc.1.0.view", @"/Views/Home/Game.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\vmartinez\source\repos\vmartinez1984\PI_Almacen\Activities\Views\_ViewImports.cshtml"
using Activities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\vmartinez\source\repos\vmartinez1984\PI_Almacen\Activities\Views\_ViewImports.cshtml"
using Activities.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"32b3c3bd2eaf616176c4deaea7f1f0b78c9fca96", @"/Views/Home/Game.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4a6eea3e0c48c887bdcba9e9adb4cf8a181ace29", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Game : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/tetris.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\vmartinez\source\repos\vmartinez1984\PI_Almacen\Activities\Views\Home\Game.cshtml"
  
    ViewData["Title"] = "Tetris";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "32b3c3bd2eaf616176c4deaea7f1f0b78c9fca964739", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "32b3c3bd2eaf616176c4deaea7f1f0b78c9fca965001", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "32b3c3bd2eaf616176c4deaea7f1f0b78c9fca966974", async() => {
                WriteLiteral(@"
    <div id=""tetris"" class=""container"">
        <div class=""row"">
            <div class=""col-md-6"">
                <div id=""menu"">
                    <p id=""start""><a href=""javascript:play();"" class=""text-primary"">Presiona espacio para jugar.</a></p>
                    <p><canvas id=""upcoming""></canvas></p>
                    <p>Registro <span id=""score"">00000</span></p>
                    <p>Filas <span id=""rows"">0</span></p>
                </div>
            </div>

            <div class=""col-md-6"">
                <canvas id=""canvas"">
                    Sorry, this example cannot be run because your browser does not support the &lt;canvas&gt; element
                </canvas>
            </div>
        </div>
    </div>

    <script src=""/js/stats.js""></script>
    <script>

        //-------------------------------------------------------------------------
        // base helper methods
        //-------------------------------------------------------------------------
");
                WriteLiteral(@"
        function get(id)        { return document.getElementById(id);  }
        function hide(id)       { get(id).style.visibility = 'hidden'; }
        function show(id)       { get(id).style.visibility = null;     }
        function html(id, html) { get(id).innerHTML = html;            }

        function timestamp()           { return new Date().getTime();                             }
        function random(min, max)      { return (min + (Math.random() * (max - min)));            }
        function randomChoice(choices) { return choices[Math.round(random(0, choices.length-1))]; }

        if (!window.requestAnimationFrame) { // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
          window.requestAnimationFrame = window.webkitRequestAnimationFrame ||
                                         window.mozRequestAnimationFrame    ||
                                         window.oRequestAnimationFrame      ||
                                         window.msRequestAnim");
                WriteLiteral(@"ationFrame     ||
                                         function(callback, element) {
                                           window.setTimeout(callback, 1000 / 60);
                                         }
        }

        //-------------------------------------------------------------------------
        // game constants
        //-------------------------------------------------------------------------

        var KEY     = { ESC: 27, SPACE: 32, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 },
            DIR     = { UP: 0, RIGHT: 1, DOWN: 2, LEFT: 3, MIN: 0, MAX: 3 },
            stats   = new Stats(),
            canvas  = get('canvas'),
            ctx     = canvas.getContext('2d'),
            ucanvas = get('upcoming'),
            uctx    = ucanvas.getContext('2d'),
            speed   = { start: 0.6, decrement: 0.005, min: 0.1 }, // how long before piece drops by 1 row (seconds)
            nx      = 10, // width of tetris court (in blocks)
            ny      = 20, // height o");
                WriteLiteral(@"f tetris court (in blocks)
            nu      = 5;  // width/height of upcoming preview (in blocks)

        //-------------------------------------------------------------------------
        // game variables (initialized during reset)
        //-------------------------------------------------------------------------

        var dx, dy,        // pixel size of a single tetris block
            blocks,        // 2 dimensional array (nx*ny) representing tetris court - either empty block or occupied by a 'piece'
            actions,       // queue of user actions (inputs)
            playing,       // true|false - game is in progress
            dt,            // time since starting this game
            current,       // the current piece
            next,          // the next piece
            score,         // the current score
            vscore,        // the currently displayed score (it catches up to score in small chunks - like a spinning slot machine)
            rows,          // n");
                WriteLiteral(@"umber of completed rows in the current game
            step;          // how long before current piece drops by 1 row

        //-------------------------------------------------------------------------
        // tetris pieces
        //
        // blocks: each element represents a rotation of the piece (0, 90, 180, 270)
        //         each element is a 16 bit integer where the 16 bits represent
        //         a 4x4 set of blocks, e.g. j.blocks[0] = 0x44C0
        //
        //             0100 = 0x4 << 3 = 0x4000
        //             0100 = 0x4 << 2 = 0x0400
        //             1100 = 0xC << 1 = 0x00C0
        //             0000 = 0x0 << 0 = 0x0000
        //                               ------
        //                               0x44C0
        //
        //-------------------------------------------------------------------------

        var i = { size: 4, blocks: [0x0F00, 0x2222, 0x00F0, 0x4444], color: 'cyan'   };
        var j = { size: 3, blocks: [0x44C0, 0x8E00");
                WriteLiteral(@", 0x6440, 0x0E20], color: 'blue'   };
        var l = { size: 3, blocks: [0x4460, 0x0E80, 0xC440, 0x2E00], color: 'orange' };
        var o = { size: 2, blocks: [0xCC00, 0xCC00, 0xCC00, 0xCC00], color: 'yellow' };
        var s = { size: 3, blocks: [0x06C0, 0x8C40, 0x6C00, 0x4620], color: 'green'  };
        var t = { size: 3, blocks: [0x0E40, 0x4C40, 0x4E00, 0x4640], color: 'purple' };
        var z = { size: 3, blocks: [0x0C60, 0x4C80, 0xC600, 0x2640], color: 'red'    };

        //------------------------------------------------
        // do the bit manipulation and iterate through each
        // occupied block (x,y) for a given piece
        //------------------------------------------------
        function eachblock(type, x, y, dir, fn) {
          var bit, result, row = 0, col = 0, blocks = type.blocks[dir];
          for(bit = 0x8000 ; bit > 0 ; bit = bit >> 1) {
            if (blocks & bit) {
              fn(x + col, y + row);
            }
            if (++col === 4) {
       ");
                WriteLiteral(@"       col = 0;
              ++row;
            }
          }
        }

        //-----------------------------------------------------
        // check if a piece can fit into a position in the grid
        //-----------------------------------------------------
        function occupied(type, x, y, dir) {
          var result = false
          eachblock(type, x, y, dir, function(x, y) {
            if ((x < 0) || (x >= nx) || (y < 0) || (y >= ny) || getBlock(x,y))
              result = true;
          });
          return result;
        }

        function unoccupied(type, x, y, dir) {
          return !occupied(type, x, y, dir);
        }

        //-----------------------------------------
        // start with 4 instances of each piece and
        // pick randomly until the 'bag is empty'
        //-----------------------------------------
        var pieces = [];
        function randomPiece() {
          if (pieces.length == 0)
            pieces = [i,i,i,i,j,j,j,j,l,l,");
                WriteLiteral(@"l,l,o,o,o,o,s,s,s,s,t,t,t,t,z,z,z,z];
          var type = pieces.splice(random(0, pieces.length-1), 1)[0];
          return { type: type, dir: DIR.UP, x: Math.round(random(0, nx - type.size)), y: 0 };
        }


        //-------------------------------------------------------------------------
        // GAME LOOP
        //-------------------------------------------------------------------------

        function run() {

          showStats(); // initialize FPS counter
          addEvents(); // attach keydown and resize events

          var last = now = timestamp();
          function frame() {
            now = timestamp();
            update(Math.min(1, (now - last) / 1000.0)); // using requestAnimationFrame have to be able to handle large delta's caused when it 'hibernates' in a background or non-visible tab
            draw();
            stats.update();
            last = now;
            requestAnimationFrame(frame, canvas);
          }

          resize(); // setup all ou");
                WriteLiteral(@"r sizing information
          reset();  // reset the per-game variables
          frame();  // start the first frame

        }

        function showStats() {
          stats.domElement.id = 'stats';
          get('menu').appendChild(stats.domElement);
        }

        function addEvents() {
          document.addEventListener('keydown', keydown, false);
          window.addEventListener('resize', resize, false);
        }

        function resize(event) {
          canvas.width   = canvas.clientWidth;  // set canvas logical size equal to its physical size
          canvas.height  = canvas.clientHeight; // (ditto)
          ucanvas.width  = ucanvas.clientWidth;
          ucanvas.height = ucanvas.clientHeight;
          dx = canvas.width  / nx; // pixel size of a single tetris block
          dy = canvas.height / ny; // (ditto)
          invalidate();
          invalidateNext();
        }

        function keydown(ev) {
          var handled = false;
          if (playing) {
 ");
                WriteLiteral(@"           switch(ev.keyCode) {
              case KEY.LEFT:   actions.push(DIR.LEFT);  handled = true; break;
              case KEY.RIGHT:  actions.push(DIR.RIGHT); handled = true; break;
              case KEY.UP:     actions.push(DIR.UP);    handled = true; break;
              case KEY.DOWN:   actions.push(DIR.DOWN);  handled = true; break;
              case KEY.ESC:    lose();                  handled = true; break;
            }
          }
          else if (ev.keyCode == KEY.SPACE) {
            play();
            handled = true;
          }
          if (handled)
            ev.preventDefault(); // prevent arrow keys from scrolling the page (supported in IE9+ and all other browsers)
        }

        //-------------------------------------------------------------------------
        // GAME LOGIC
        //-------------------------------------------------------------------------

        function play() { hide('start'); reset();          playing = true;  }
        function lo");
                WriteLiteral(@"se() { show('start'); setVisualScore(); playing = false; }

        function setVisualScore(n)      { vscore = n || score; invalidateScore(); }
        function setScore(n)            { score = n; setVisualScore(n);  }
        function addScore(n)            { score = score + n;   }
        function clearScore()           { setScore(0); }
        function clearRows()            { setRows(0); }
        function setRows(n)             { rows = n; step = Math.max(speed.min, speed.start - (speed.decrement*rows)); invalidateRows(); }
        function addRows(n)             { setRows(rows + n); }
        function getBlock(x,y)          { return (blocks && blocks[x] ? blocks[x][y] : null); }
        function setBlock(x,y,type)     { blocks[x] = blocks[x] || []; blocks[x][y] = type; invalidate(); }
        function clearBlocks()          { blocks = []; invalidate(); }
        function clearActions()         { actions = []; }
        function setCurrentPiece(piece) { current = piece || randomPiece(); inva");
                WriteLiteral(@"lidate();     }
        function setNextPiece(piece)    { next    = piece || randomPiece(); invalidateNext(); }

        function reset() {
          dt = 0;
          clearActions();
          clearBlocks();
          clearRows();
          clearScore();
          setCurrentPiece(next);
          setNextPiece();
        }

        function update(idt) {
          if (playing) {
            if (vscore < score)
              setVisualScore(vscore + 1);
            handle(actions.shift());
            dt = dt + idt;
            if (dt > step) {
              dt = dt - step;
              drop();
            }
          }
        }

        function handle(action) {
          switch(action) {
            case DIR.LEFT:  move(DIR.LEFT);  break;
            case DIR.RIGHT: move(DIR.RIGHT); break;
            case DIR.UP:    rotate();        break;
            case DIR.DOWN:  drop();          break;
          }
        }

        function move(dir) {
          var x = current.x, ");
                WriteLiteral(@"y = current.y;
          switch(dir) {
            case DIR.RIGHT: x = x + 1; break;
            case DIR.LEFT:  x = x - 1; break;
            case DIR.DOWN:  y = y + 1; break;
          }
          if (unoccupied(current.type, x, y, current.dir)) {
            current.x = x;
            current.y = y;
            invalidate();
            return true;
          }
          else {
            return false;
          }
        }

        function rotate() {
          var newdir = (current.dir == DIR.MAX ? DIR.MIN : current.dir + 1);
          if (unoccupied(current.type, current.x, current.y, newdir)) {
            current.dir = newdir;
            invalidate();
          }
        }

        function drop() {
          if (!move(DIR.DOWN)) {
            addScore(10);
            dropPiece();
            removeLines();
            setCurrentPiece(next);
            setNextPiece(randomPiece());
            clearActions();
            if (occupied(current.type, current.x, current");
                WriteLiteral(@".y, current.dir)) {
              lose();
            }
          }
        }

        function dropPiece() {
          eachblock(current.type, current.x, current.y, current.dir, function(x, y) {
            setBlock(x, y, current.type);
          });
        }

        function removeLines() {
          var x, y, complete, n = 0;
          for(y = ny ; y > 0 ; --y) {
            complete = true;
            for(x = 0 ; x < nx ; ++x) {
              if (!getBlock(x, y))
                complete = false;
            }
            if (complete) {
              removeLine(y);
              y = y + 1; // recheck same line
              n++;
            }
          }
          if (n > 0) {
            addRows(n);
            addScore(100*Math.pow(2,n-1)); // 1: 100, 2: 200, 3: 400, 4: 800
          }
        }

        function removeLine(n) {
          var x, y;
          for(y = n ; y >= 0 ; --y) {
            for(x = 0 ; x < nx ; ++x)
              setBlock(x, y, (y == 0) ? n");
                WriteLiteral(@"ull : getBlock(x, y-1));
          }
        }

        //-------------------------------------------------------------------------
        // RENDERING
        //-------------------------------------------------------------------------

        var invalid = {};

        function invalidate()         { invalid.court  = true; }
        function invalidateNext()     { invalid.next   = true; }
        function invalidateScore()    { invalid.score  = true; }
        function invalidateRows()     { invalid.rows   = true; }

        function draw() {
          ctx.save();
          ctx.lineWidth = 1;
          ctx.translate(0.5, 0.5); // for crisp 1px black lines
          drawCourt();
          drawNext();
          drawScore();
          drawRows();
          ctx.restore();
        }

        function drawCourt() {
          if (invalid.court) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            if (playing)
              drawPiece(ctx, current.type, current.x");
                WriteLiteral(@", current.y, current.dir);
            var x, y, block;
            for(y = 0 ; y < ny ; y++) {
              for (x = 0 ; x < nx ; x++) {
                if (block = getBlock(x,y))
                  drawBlock(ctx, x, y, block.color);
              }
            }
            ctx.strokeRect(0, 0, nx*dx - 1, ny*dy - 1); // court boundary
            invalid.court = false;
          }
        }

        function drawNext() {
          if (invalid.next) {
            var padding = (nu - next.type.size) / 2; // half-arsed attempt at centering next piece display
            uctx.save();
            uctx.translate(0.5, 0.5);
            uctx.clearRect(0, 0, nu*dx, nu*dy);
            drawPiece(uctx, next.type, padding, padding, next.dir);
            uctx.strokeStyle = 'black';
            uctx.strokeRect(0, 0, nu*dx - 1, nu*dy - 1);
            uctx.restore();
            invalid.next = false;
          }
        }

        function drawScore() {
          if (invalid.score) {
        ");
                WriteLiteral(@"    html('score', (""00000"" + Math.floor(vscore)).slice(-5));
            invalid.score = false;
          }
        }

        function drawRows() {
          if (invalid.rows) {
            html('rows', rows);
            invalid.rows = false;
          }
        }

        function drawPiece(ctx, type, x, y, dir) {
          eachblock(type, x, y, dir, function(x, y) {
            drawBlock(ctx, x, y, type.color);
          });
        }

        function drawBlock(ctx, x, y, color) {
          ctx.fillStyle = color;
          ctx.fillRect(x*dx, y*dy, dx, dy);
          ctx.strokeRect(x*dx, y*dy, dx, dy)
        }

        //-------------------------------------------------------------------------
        // FINALLY, lets run the game
        //-------------------------------------------------------------------------

        run();

    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
